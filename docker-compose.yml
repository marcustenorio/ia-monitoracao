version: '3.8'

services:
  mysql-server:
    image: mysql:8.3
    container_name: mysql-server
    environment:
      MYSQL_DATABASE: "zabbix"
      MYSQL_USER: "zabbix"
      MYSQL_PASSWORD: "zabbix"
      MYSQL_ROOT_PASSWORD: "zabbix"
    command: --character-set-server=utf8 --collation-server=utf8_bin
    volumes:
      - mysql-data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - zabbix-net

  zabbix-server:
    image: zabbix/zabbix-server-mysql:latest
    container_name: zabbix-server
    environment:
      DB_SERVER_HOST: "mysql-server"
      MYSQL_DATABASE: "zabbix"
      MYSQL_USER: "zabbix"
      MYSQL_PASSWORD: "zabbix"
      MYSQL_ROOT_PASSWORD: "zabbix"
    depends_on:
      - mysql-server
    ports:
      - "10051:10051"
    restart: unless-stopped
    networks:
      - zabbix-net
    healthcheck:
      test: ["CMD", "bash", "-c", "echo -e 'ZBXD\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00' | nc -w 1 localhost 10051 || exit 1"]
      interval: 10s
      retries: 10

  zabbix-web:
    image: zabbix/zabbix-web-apache-mysql:latest
    container_name: zabbix-web
    environment:
      ZBX_SERVER_HOST: "zabbix-server"
      DB_SERVER_HOST: "mysql-server"
      MYSQL_DATABASE: "zabbix"
      MYSQL_USER: "zabbix"
      MYSQL_PASSWORD: "zabbix"
      MYSQL_ROOT_PASSWORD: "zabbix"
      PHP_TZ: "America/Sao_Paulo"
    depends_on:
      - zabbix-server
    ports:
      - "80:8080"
    restart: unless-stopped
    networks:
      - zabbix-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      retries: 10

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/etc/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - zabbix-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_INSTALL_PLUGINS: "alexanderzobnin-zabbix-app"
      GF_METRICS_ENABLED: "true"
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - zabbix-net

  node-app:
    build: ./src/node-app
    container_name: node-app
    ports:
      - "4000:3000"
    restart: unless-stopped
    networks:
      - zabbix-net
  analyzer-timeseries:
    build:
      context: ./src
      dockerfile: agents/analyzer_timeseries/Dockerfile
    container_name: analyzer-timeseries
    environment:
      TS_INPUT_DIR: /data/raw/timeseries
      TS_OUTPUT_CSV: /data/processed/anomalies_timeseries.csv
      TS_WINDOW_MIN: "120"
      TS_ROLL_N: "5"
      TS_THRESHOLD: "-0.1"
    volumes:
      - ./data:/data
    depends_on:
      - collector-job
    networks:
      - zabbix-net
    restart: "no"

  collector-job:
    build:
      context: ./src/agents/collector
      dockerfile: Dockerfile
    container_name: collector-job
    volumes:
      - ./src/agents/collector:/app
      - ./data/processed:/data/processed
      - ./data/raw:/data/raw
    depends_on:
      zabbix-web:
        condition: service_healthy
    environment:
      ZABBIX_URL: "http://zabbix-web:8080"
      ZABBIX_USER: "Admin"
      ZABBIX_PASS: "zabbix"
      PYTHONPATH: /app/src
      TS_ENABLED: "true"                # <--- habilita sÃ©ries temporais
      TS_ITEMS: "system.cpu.util[,user];system.cpu.util[,system]"  # <--- EXEMPLO
      TS_LOOKBACK_MIN: "180"
      TS_OUT_DIR: "/data/raw/timeseries"
      COLLECT_INTERVAL_SEC: "30"            
      ZBX_WINDOW_MIN: "5"              

    networks:
      - zabbix-net
    command: ["python", "main.py"]

  analyzer-job:
    build:
      context: ./src   # <-- assim o build enxerga toda a pasta src/
      dockerfile: agents/analyzer/Dockerfile
    container_name: analyzer-job
    environment:
      INPUT_FILE: /data/processed/anomalies_dataset.csv
      OUTPUT_FILE: /data/processed/dataset_ready.csv
      PYTHONPATH: /app/src
    volumes:
      - ./data:/data
      - ./src/infrastructure:/app/infrastructure
    depends_on:
      - collector-job
    networks:
      - zabbix-net
  ml-trainer-job:
    build:
      context: ./src            # importante: contexto em ./src (igual ao analyzer)
      dockerfile: agents/ml_trainer/Dockerfile
    container_name: ml-trainer-job
    environment:
      TRAIN_INPUT: /data/processed/dataset_labeled.csv
      MODEL_PATH: /data/models/anomaly_model.pkl
      METRICS_PATH: /data/reports/metrics.json
      FEATURE_IMP_PATH: /data/reports/feature_importances.csv
      PYTHONPATH: /app
    volumes:
      - ./data:/data
      - ./src/infrastructure:/app/infrastructure
    depends_on:
      - analyzer-job
    networks:
      - zabbix-net
    restart: "no"
  orchestrator-job:
    build:
      context: ./src
      dockerfile: agents/orchestrator/Dockerfile
    container_name: orchestrator-job
    environment:
      ORCH_INPUT: /data/processed/dataset_labeled.csv
      ORCH_TS_INPUT: /data/processed/anomalies_timeseries.csv
      ACTIONS_PENDING: /data/actions/pending_actions.jsonl
      ACTIONS_EXECUTED: /data/actions/executed_actions.jsonl
      ORCH_STATE_PATH: /data/actions/.orchestrator_state.json

      THRESHOLD: "0.7"
      PRIORITY_MIN: "0.7"

      TS_ENABLE: "true"
      TS_SCORE_FIELD: "score"
      TS_FLAG_FIELD: "is_incident"
      TS_MIN_SCORE: "-0.1"

      ORCH_LOOP_ENABLED: "true"
      ORCH_LOOP_SECONDS: "20"
      ORCH_DEBUG: "true"
      PYTHONUNBUFFERED: "1"     # logs em tempo real
    command: ["python", "-u", "main.py"]  # sem buffer de stdout
    volumes:
      - ./data:/data
      - ./src/infrastructure:/app/infrastructure
    depends_on:
      - analyzer-timeseries
    networks:
      - zabbix-net
    restart: unless-stopped
  executor-job:
    build:
      context: ./src
      dockerfile: agents/executor/Dockerfile
    container_name: executor-job
    environment:
      ACTIONS_PENDING: /data/actions/pending_actions.jsonl
      ACTIONS_EXECUTED: /data/actions/executed_actions.jsonl
      PYTHONPATH: /app/src
    volumes:
      - ./data:/data
      - ./src/infrastructure:/app/infrastructure
    depends_on:
      - orchestrator-job
    networks:
      - zabbix-net
    restart: "no"

  prometheus-agent:
    image: zabbix/zabbix-agent2:latest
    container_name: prometheus-agent
    environment:
      ZBX_HOSTNAME: "Prometheus"
      ZBX_SERVER_HOST: "zabbix-server"
    depends_on:
      - zabbix-server
    restart: unless-stopped
    networks:
      - zabbix-net

  node-agent:
    image: zabbix/zabbix-agent2:latest
    container_name: node-agent
    environment:
      ZBX_HOSTNAME: "Node"
      ZBX_SERVER_HOST: "zabbix-server"
    depends_on:
      - zabbix-server
    restart: unless-stopped
    networks:
      - zabbix-net

  grafana-agent:
    image: zabbix/zabbix-agent2:latest
    container_name: grafana-agent
    environment:
      ZBX_HOSTNAME: "Grafana"
      ZBX_SERVER_HOST: "zabbix-server"
    depends_on:
      - zabbix-server
    restart: unless-stopped
    networks:
      - zabbix-net

  zabbix-agent2:
    image: zabbix/zabbix-agent2:latest
    container_name: zabbix-agent2
    environment:
      ZBX_HOSTNAME: "Zabbix server"
      ZBX_SERVER_HOST: "zabbix-server"
    depends_on:
      - zabbix-server
    restart: always
    networks:
      - zabbix-net

  mysql-agent:
    image: zabbix/zabbix-agent2:latest
    container_name: mysql-agent
    environment:
      ZBX_HOSTNAME: "Mysql Server"
      ZBX_SERVER_HOST: "zabbix-server"
    depends_on:
      - zabbix-server
    restart: always
    networks:
      - zabbix-net

volumes:
  mysql-data:
  prometheus-data:
  grafana-data:

networks:
  zabbix-net:
    external: true
    name: ia-monitoracao_zabbix-net
